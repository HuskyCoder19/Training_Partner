@page "/workout"
@page "/workout/{id:int}"
@using DBLibrary
@using Models
@using Microsoft.Extensions.Configuration
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject IMysqlAccess _sqlDB
@inject IConfiguration _config
@inject IJSRuntime _jsRuntime

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if (!isLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="workout" OnValidSubmit="HandleSubmit" FormName="AddWorkout">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="type">Workout Type:</label>
                    <InputSelect id="type" @bind-Value="workout!.TypeID" class="form-select">
                        <option value="0">Select Type</option>
                        <option value="1">Cardio</option>
                        <option value="2">Weight Lift</option>
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="length">Workout Length:</label>
                    <InputNumber id="length" @bind-Value="workout!.Length" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="cals">Calories Burnt:</label>
                    <InputNumber id="cals" @bind-Value="workout!.CalsBurnt" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="date">Date:</label>
                    <InputDate id="date" @bind-Value="workout!.Date" class="form-control"></InputDate>
                </div>
                @if (workout.TypeID == 1)
                {
                    <div class="mb-3">
                        <label for="cardioType">Cardio Type:</label>
                        <InputSelect id="cardioType" @bind-Value="cardioWorkout!.CardioID" class="form-select">
                            <option value="1">Run</option>
                            <option value="2">Bike</option>
                            <option value="3">swim</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="distance">Distance (miles):</label>
                        <InputNumber id="distance" @bind-Value="cardioWorkout!.Distance" class="form-control"></InputNumber>
                    </div>
                } else if (workout.TypeID == 2 && Id is not null)
                {
                    <button type="button" class="btn btn-primary" style="margin-right: 10px;" @onclick="AddLifts">Add Lifts</button>
                }
                <button type="submit" class="btn btn-primary">Save</button>
                @if (Id is not null)
                {
                    <button type="button" class="btn btn-danger" style="margin-left: 10px;" @onclick="DeleteWorkout">Delete</button>
                }
                <button type="button" class="btn btn-secondary" style="margin-left: 10px;" @onclick="Cancel">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter]
    public int? Id { get; set; } // page parameter

    private Workout? workout { get; set; } // workout object
    private CardioWorkout? cardioWorkout { get; set; } // cardio workout object

    private string? title { get; set; } // page title

    // cardio values
    private int cardioType { get; set; }
    private double distance { get; set; }

    private bool isLoaded = false; // workout model loaded flag
    private bool hasCardio = false; // flag for existing cardio workout with workout ID

    protected override async Task OnParametersSetAsync()
    {
        // check ID page parameter
        if (Id is not null)
        {

            string sql = $"select length, calsBurnt, date, typeID from workouts where id = {Id};";
            string? connStr = _config.GetConnectionString("default");
            List<Workout>? wList = await _sqlDB.LoadData<Workout, dynamic>(sql, new { }, connStr!);
            workout = wList[0];

            // check if workout type is cardio
            if (workout.TypeID == 1)
            {
                // get the cardio workout associated with the current workout (one to one relationship)
                sql = $"select distance, cardioID from cardio_workouts where workoutID = {Id};";
                List<CardioWorkout>? cList = await _sqlDB.LoadData<CardioWorkout, dynamic>(sql, new { }, connStr!);
                // ensure cardio workout was found, consctruct new one otherwise
                if (cList.Count > 0)
                {
                    cardioWorkout = cList[0];
                    hasCardio = true;
                } 
                else
                {
                    cardioWorkout ??= new CardioWorkout(); // construct new object if null
                    cardioWorkout.CardioID = 1; // default to run
                }

            }
            title = "Edit Workout";
        }
        else
        {
            // no ID parameter, construct new workout
            workout ??= new Workout();
            workout.Id = 0;
            workout.TypeID = 0;
            title = "New Workout";

            // construct new cardio workout
            cardioWorkout ??= new CardioWorkout();
            cardioWorkout.CardioID = 1; // default to run
        }
        isLoaded = true;
    }


    private async Task HandleSubmit()
    {
        if (workout != null)
        {
            if (Id is null)
            {
                await AddWorkout();
                await GetNewId();
                if (workout.TypeID == 1) await AddCardioWorkout(); // add cardio workout
            }
            else
            {
                await UpdateWorkout();
                if (workout!.TypeID == 1 && hasCardio) await UpdateCardioWorkout(); // update cardio workout

            }
            NavManager.NavigateTo($"/workout/{Id}");
        }
    }

    private async Task AddWorkout()
    {
        // TODO: change userID to session variable
        // add workout to the database
        string sql = $"insert into workouts (length, calsBurnt, date, userID, typeID) values ({workout!.Length}, {workout.CalsBurnt}, '{workout.Date.ToString("yyyy-MM-dd")}', {5}, {workout.TypeID});";
        string? connStr = _config.GetConnectionString("default");
        await _sqlDB.StoreData(sql, new { }, connStr!);
    }

    private async Task UpdateWorkout()
    {
        // update workout in the database
        string sql = $"update workouts set length = {workout!.Length}, calsBurnt = {workout.CalsBurnt}, date = '{workout.Date.ToString("yyyy-MM-dd")}', typeID = {workout.TypeID} where id = {Id};";
        string? connStr = _config.GetConnectionString("default");
        await _sqlDB.StoreData(sql, new { }, connStr!);
    }

    private async Task AddCardioWorkout()
    {
        // add cardio workout to the database
        double pace = 0;
        if (cardioWorkout!.Distance > 0) pace = workout!.Length / cardioWorkout!.Distance;
        string sql = $"insert into cardio_workouts (distance, pace, cardioID, workoutID) values ({cardioWorkout!.Distance}, {pace}, {cardioWorkout.CardioID}, {Id});";
        string? connStr = _config.GetConnectionString("default");
        await _sqlDB.StoreData(sql, new { }, connStr!);
    }

    private async Task UpdateCardioWorkout()
    {
        // update cardio workout in the database
        double pace = 0;
        if (cardioWorkout!.Distance > 0) pace = workout!.Length / cardioWorkout!.Distance;
        string sql = $"update cardio_workouts set distance = {cardioWorkout!.Distance}, pace = {pace}, cardioID = {cardioWorkout!.CardioID} where workoutID = {Id};";
        string? connStr = _config.GetConnectionString("default");
        await _sqlDB.StoreData(sql, new { }, connStr!);
    }

    private async Task DeleteWorkout()
    {
        // handle delete button press
        bool confirm = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirm)
        {
            if (workout is not null)
            {

                // delete cardio workout associated with workout
                if (workout.TypeID == 1)
                {
                    await DeleteCardioWorkout();
                }

                string sql = $"delete from workouts where id = {Id};";
                string? connStr = _config.GetConnectionString("default");
                await _sqlDB.StoreData(sql, new { }, connStr!);

            }

            NavManager.NavigateTo("/");
        }
    }

    private async Task DeleteCardioWorkout()
    {
        // delete cardio workout from database
        string sql = $"delete from cardio_workouts where workoutID = {Id};";
        string? connStr = _config.GetConnectionString("default");
        await _sqlDB.StoreData(sql, new { }, connStr!);
    }

    private async Task GetNewId()
    {
        // get latest workout entry ID
        string sql = $"select max(id) from workouts;";
        string? connStr = _config.GetConnectionString("default");
        List<int> ids = await _sqlDB.LoadData<int, dynamic>(sql, new { }, connStr!);
        Id = ids[0];
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/");
    }

    private void AddLifts()
    {
        NavManager.NavigateTo($"/lifts/{Id}"); // needs to be linked
    }

}
